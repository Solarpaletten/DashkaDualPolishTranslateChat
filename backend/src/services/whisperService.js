// backend/src/services/whisperService.js
const fs = require('fs');
const path = require('path');
const OpenAI = require('openai');

class WhisperService {
  constructor(apiKey) {
    this.openai = new OpenAI({ apiKey });
  }

  /**
   * –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Whisper API.
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏ –¥–∏–∞–ª–µ–∫—Ç–æ–≤.
   * @param {string} audioFilePath - –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
   * @param {string} [language='auto'] - —è–∑—ã–∫ —Ä–µ—á–∏ (–∏–ª–∏ auto)
   * @returns {Promise<{text: string, language: string, confidence: number, provider: string}>}
   */
  async transcribeAudio(audioFilePath, language = 'auto') {
    try {
      if (!fs.existsSync(audioFilePath)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${audioFilePath}`);
      }

      console.log(`üé§ Transcribing audio file: ${path.basename(audioFilePath)}`);
      console.log(`üåç Whisper language param: ${language}`);

      // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–∏–∞–ª–µ–∫—Ç–æ–≤
      const langMap = {
        'de-DE': 'de',
        'ru-RU': 'ru',
        'ru': 'ru'
      };
      const whisperLang = langMap[language] || (language === 'auto' ? undefined : language);

      // Whisper API
      const transcription = await this.openai.audio.transcriptions.create({
        file: fs.createReadStream(audioFilePath),
        model: 'whisper-1',
        language: whisperLang,
        response_format: 'json',
        temperature: 0.2
      });

      const text = transcription.text?.trim() || '';
      const detectedLang = transcription.language || whisperLang || 'auto';

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—à–∞–Ω–Ω—ã–π –∞–ª—Ñ–∞–≤–∏—Ç
      const hasMixedAlphabet =
        /[–∞-—è–ê-–Ø]/.test(text) && /[a-zA-Z]/.test(text);
      if (hasMixedAlphabet) {
        console.warn('‚ö†Ô∏è Whisper: —Å–º–µ—à–∞–Ω–Ω—ã–π –∞–ª—Ñ–∞–≤–∏—Ç –≤ —Ç–µ–∫—Å—Ç–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞)');
      }

      console.log(`‚úÖ Transcription done [${detectedLang}] ‚Üí ${text.slice(0, 60)}...`);

      return {
        text,
        language: detectedLang,
        confidence: transcription.confidence || 0.95,
        provider: 'openai-whisper-1'
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ Whisper: ${error.message}`);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
   */
  async transcribeText(inputText) {
    if (!inputText) {
      throw new Error('–¢–µ–∫—Å—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
    }
    return {
      text: inputText.trim(),
      language: 'text',
      confidence: 1.0,
      provider: 'text-input'
    };
  }
}

module.exports = WhisperService;
